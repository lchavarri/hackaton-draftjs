import React, { useState, useEffect } from 'react';
import { Message } from 'semantic-ui-react';

import * as storage from '../utils/storage';
import * as apiService from '../services/apiservice';
import * as applicationContext from '../utils/applicationContext';
import useWindowSize from '../hooks/useWindowSize';
import { Context } from './main';
import EidosIcon from '../components/CustomIcons/EidosIcon';

type QUIP_MENU_TYPE = {
  toolbarCommandIds: Array<string>;
  menuCommands: {
    subCommands: Array<string>;
    buttons: Array<{ id: string; label: string; handler: Function }>;
  };
  disabledCommandIds: Array<string>;
  highlightedCommandIds: Array<string>;
};

export default function QuipApp(props: any) {
  const [loading, setLoading] = useState(true);
  const [logged, setLogged] = useState(false);
  const [fullscreen, setFullscreen] = useState(false);
  const [mainDivStyles, setMainDivStyles] = useState<React.CSSProperties>({});

  const [quipMenu, setQuipMenu] = useState<QUIP_MENU_TYPE>();
  const windowSize = useWindowSize();

  // ----- Preventing undo shortcut on Quip document ----
  useEffect(() => {
    const event = (e: KeyboardEvent) => {
      // Registering event for ctrl-z or cmd-z in MacOS
      if (e.keyCode === 90 && (e.ctrlKey || e.metaKey)) {
        e.stopPropagation();
      }
    };

    window.addEventListener('keydown', event, true);

    return () => window.removeEventListener('keydown', event, true);
  }, []);

  // ----- Login -----
  useEffect(() => {
    const user = applicationContext.quipDocumentId();
    const password = 'corning';
    apiService
      .httpPost('/login', { user, password }, {})
      .then((res: any) => {
        const { token_id } = res && res.data;
        storage.set('token_id', token_id);
        storage.set('user', user);
        setLogged(true);
        setLoading(false);
      })
      .catch((err: any) => {
        console.error(err);
        setLoading(false);
      });
  }, []);

  // ----- Maximize - Restore -----

  useEffect(() => {
    window.quip.apps.addEventListener(window.quip.apps.EventType.BLUR, () =>
      setFullscreen(false)
    );

    return () => {
      window.quip.apps.removeEventListener(
        window.quip.apps.EventType.BLUR,
        () => setFullscreen(false)
      );
    };
  }, []);

  useEffect(() => {
    if (quipMenu) {
      window.quip.apps.updateToolbar({
        toolbarCommandIds: [
          window.quip.apps.DocumentMenuCommands.MENU_MAIN,
          ...quipMenu.toolbarCommandIds
        ],
        menuCommands: [
          {
            id: window.quip.apps.DocumentMenuCommands.MENU_MAIN,
            subCommands: quipMenu.menuCommands.subCommands
          },
          ...quipMenu.menuCommands.buttons
        ],
        disabledCommandIds: quipMenu.disabledCommandIds,
        highlightedCommandIds: quipMenu.highlightedCommandIds
      });
    }
  }, [quipMenu]);

  // ----- Styles -----
  useEffect(() => {
    setTimeout(() => {
      setMainDivStyles(stylesMainDiv());

      // Binding backdrop events to effects generated by windowSize and fullscreen changes
      if (fullscreen) {
        window.quip.apps.showBackdrop();
      } else {
        window.quip.apps.dismissBackdrop();
      }
    }, 0);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [windowSize.height, windowSize.width, fullscreen]);

  function stylesMainDiv() {
    if (!fullscreen) {
      return {
        position: 'static',
        ...props.styles
      } as React.CSSProperties;
    }

    const dim = window.quip.apps.getViewportDimensions();
    const rect = window.quip.apps.getBoundingClientRect();

    return {
      position: 'relative',
      top: -rect.top,
      left: -rect.left,
      width: windowSize.width - 5, // Scrollbar space left on the right
      height: dim.height,
      zIndex: 302
    } as React.CSSProperties;
  }

  // ----- Render ------

  if (loading) {
    return props.loader;
  }

  if (!logged) {
    return (
      <Message
        className="custom-info"
        icon={<EidosIcon />}
        header={`${props.appName} is currently unavailable.`}
        content="On the Corning network? Try refreshing the page or contacting your system administrator."
      ></Message>
    );
  }

  return (
    <Context.Provider
      value={{
        isQuipApp: true,
        setActionsMenu: setQuipMenu,
        fullscreen,
        setFullscreen,
        liveAppInstanceId: applicationContext.quipAppId(),
        documentId: applicationContext.quipDocumentId(),
        appContainerRef: props.appContainerRef,
        currentRecord: applicationContext.currentAppRecord()
      }}
    >
      <div style={mainDivStyles}>{props.children}</div>
    </Context.Provider>
  );
}
